# ~/.bashrc: executed by bash(1) for non-login shells.

# see /usr/share/doc/bash/examples/startup-files (in the package bash-doc)
# for examples
# If not running interactively, don't do anything
[ -z "$PS1" ] && return
# don't put duplicate lines in the history. See bash(1) for more options
# ... or force ignoredups and ignorespace
HISTCONTROL=ignoredups:ignorespace

# append to the history file, don't overwrite it
shopt -s histappend

# for setting history length see HISTSIZE and HISTFILESIZE in bash(1)
HISTSIZE=10000
HISTFILESIZE=20000

# check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
shopt -s checkwinsize

# make less more friendly for non-text input files, see lesspipe(1)
[ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"

# set variable identifying the chroot you work in (used in the prompt below)
if [ -z "$debian_chroot" ] && [ -r /etc/debian_chroot ]; then
    debian_chroot=$(cat /etc/debian_chroot)
fi

# set a fancy prompt (non-color, unless we know we "want" color)
case "$TERM" in
    xterm-color) color_prompt=yes;;
esac

# uncomment for a colored prompt, if the terminal has the capability; turned
# off by default to not distract the user: the focus in a terminal window
# should be on the output of commands, not on the prompt
#force_color_prompt=yes

if [ -n "$force_color_prompt" ]; then
    if [ -x /usr/bin/tput ] && tput setaf 1 >&/dev/null; then
        # We have color support; assume it's compliant with Ecma-48
        # (ISO/IEC-6429). (Lack of such support is extremely rare, and such
        # a case would tend to support setf rather than setaf.)
        color_prompt=yes
    else
        color_prompt=
    fi
fi

if [ "$color_prompt" = yes ]; then
    PS1='${debian_chroot:+($debian_chroot)}\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\]\$ '
else
    PS1='${debian_chroot:+($debian_chroot)}\u@\h:\w\$ '
fi
unset color_prompt force_color_prompt

# If this is an xterm set the title to user@host:dir
case "$TERM" in
xterm*|rxvt*)
    PS1="\[\e]0;${debian_chroot:+($debian_chroot)}\u@\h: \w\a\]$PS1"
    ;;
*)
    ;;
esac

# enable color support of ls and also add handy aliases
if [ -x /usr/bin/dircolors ]; then
    test -r ~/.dircolors && eval "$(dircolors -b ~/.dircolors)" || eval "$(dircolors -b)"
    alias ls='ls --color=auto'
    #alias dir='dir --color=auto'
    #alias vdir='vdir --color=auto'

    alias grep='grep --color=auto'
    alias fgrep='fgrep --color=auto'
    alias egrep='egrep --color=auto'
fi

# some more ls aliases
alias ll='ls -lF'
alias la='ls -A'
alias l='ls -CF'
alias vi="vim"

# Github/Gitee
alias push='custom_push() 
{ 
  if [ -z "$(git status --porcelain)" ]; then
    return 0 
  fi
  git add .
  git commit -m "${1:-"Adjust/Rename the Directory/File"}"
  git push gitee master
  git push github master 
} 
custom_push'

alias scc='count_today_commits()
{
  DATE=$(date +"%Y-%m-%d")
    
  START_TIME="$DATE 00:00:00"
  END_TIME="$DATE 23:59:59"
    
  COMMIT_COUNT=$(git log --since="$START_TIME" --until="$END_TIME" --pretty=format:"%ad %h" --date=short | grep "$DATE" | wc -l)
    
  echo "$DATE git_commit_times: $COMMIT_COUNT"
}
count_today_commits'


alias svcd='kubectl delete pods client server && kubectl delete svc clientsvc serversvc'

alias pp=packetdrill
alias cap1="tcpdump -pne -i any -w previous-packetdrill.cap"
alias cap2="tcpdump -pne -i any -w current-packetdrill.cap"
alias 8080="netstat -anp | grep 8080"
alias tcp="cd /root/wcni-kind/LabasCode/netenv/4-adv-netwotk/"

alias wp="cd /root/wcni-kind/LabasCode/"
alias k="kubectl"
alias cls="kind get clusters $1"
alias cld="kind delete clusters $1"
alias clda="kind delete clusters -A"
alias dip="kubectl get node -o wide"
alias kk="kubectl -nkube-system"
#alias ds="docker ps | grep -Ev 'registry|gostwire|edgeshark'"
alias ds='docker ps --format "table {{.ID}}\t{{.Image}}\t{{.Command}}\t{{.Status}}\t{{.Names}}" | grep -Ev '\''registry|gostwire|edgeshark'\'' | awk NF'
alias dcp="docker cp"
alias cc="kubectl config get-contexts" 
alias sc="kubectl config use-context $1" 
alias lo="docker exec -it $1 $2"
alias all="kubectl get pods -A"
alias clabrm="clab destroy -t clab.yaml"
alias clabrma="containerlab destroy -a"

alias ms="kubectl -nmetallb-system"
alias net="cd /root/wcni-kind/network"

alias is="kubectl -nistio-system"
alias ii="kubectl -nistio-ingress"

alias kv="kubectl-ko"

alias sk="kubectl -nsubmariner-operator"

alias mls="multipass list"
alias mm="multipass"

alias mldk='set -f;sed -i '/vmk/d' /etc/hosts && for vm in $(multipass list | grep vmk | awk -F " " "{print \$1}"); do multipass stop $vm; multipass delete --purge $vm; done && { sed -i "1!d" /root/.ssh/known_hosts;kubectl config delete-cluster kprp;kubectl config delete-context kprp;kubectl config delete-user kprp;kubectl config unset current-context;kubectl config delete-cluster kprc;kubectl config delete-context kprc;kubectl config delete-user kprc;kubectl config unset current-context;kubectl config delete-cluster kpr;kubectl config delete-context kpr;kubectl config delete-user kpr;kubectl config unset current-context;kubectl config delete-cluster kpr;kubectl config delete-context kpr;kubectl config delete-user kpr;kubectl config unset current-context; } > /dev/null 2>&1;set +f'

alias mldn='set -f;sed -i '/vmn/d' /etc/hosts && for vm in $(multipass list | grep vmn | awk -F " " "{print \$1}"); do multipass stop $vm; multipass delete --purge $vm; done && { sed -i "1!d" /root/.ssh/known_hosts;kubectl config delete-cluster nokprp;kubectl config delete-context nokprp;kubectl config delete-user nokprp;kubectl config unset current-context;kubectl config delete-cluster nokprc;kubectl config delete-context nokprc;kubectl config delete-user nokprc;kubectl config unset current-context;kubectl config delete-cluster nokpr;kubectl config delete-context nokpr;kubectl config delete-user nokpr;kubectl config unset current-context; } > /dev/null 2>&1;set +f'

alias vmnp0='ip=$(cat /etc/hosts | grep vmnp0 | awk -F " " '\''{print $1}'\'') && ssh root@$ip'
alias vmnp1='ip=$(cat /etc/hosts | grep vmnp1 | awk -F " " '\''{print $1}'\'') && ssh root@$ip'
alias vmnp2='ip=$(cat /etc/hosts | grep vmnp2 | awk -F " " '\''{print $1}'\'') && ssh root@$ip'

alias vmnc0='ip=$(cat /etc/hosts | grep vmnc0 | awk -F " " '\''{print $1}'\'') && ssh root@$ip'
alias vmnc1='ip=$(cat /etc/hosts | grep vmnc1 | awk -F " " '\''{print $1}'\'') && ssh root@$ip'
alias vmnc2='ip=$(cat /etc/hosts | grep vmnc2 | awk -F " " '\''{print $1}'\'') && ssh root@$ip'

# 1. multipass delete
alias 1604d='set -f;sed -i '/vm1604/d' /etc/hosts && for vm in $(multipass list | grep vm1604[0-9] | awk -F " " "{print \$1}"); do multipass stop $vm; multipass delete --purge $vm; done && { sed -i "1!d" /root/.ssh/known_hosts; } > /dev/null 2>&1;set +f'

alias 1804d='set -f;sed -i '/vm1804/d' /etc/hosts && for vm in $(multipass list | grep vm1804[0-9] | awk -F " " "{print \$1}"); do multipass stop $vm; multipass delete --purge $vm; done && { sed -i "1!d" /root/.ssh/known_hosts; } > /dev/null 2>&1;set +f'

alias 2004d='set -f;sed -i '/vm2004/d' /etc/hosts && for vm in $(multipass list | grep vm2004[0-9] | awk -F " " "{print \$1}"); do multipass stop $vm; multipass delete --purge $vm; done && { sed -i "1!d" /root/.ssh/known_hosts; } > /dev/null 2>&1;set +f'

alias 2204d='set -f;sed -i '/vm2204/d' /etc/hosts && for vm in $(multipass list | grep vm2204[0-9] | awk -F " " "{print \$1}"); do multipass stop $vm; multipass delete --purge $vm; done && { sed -i "1!d" /root/.ssh/known_hosts;kubectl config delete-cluster 2204ctx && kubectl config delete-context 2204ctx && kubectl config delete-user 2204ctx && kubectl config unset current-context; } > /dev/null 2>&1;set +f'

alias 2304d='set -f;sed -i '/vm2304/d' /etc/hosts && for vm in $(multipass list | grep vm2304[0-9] | awk -F " " "{print \$1}"); do multipass stop $vm; multipass delete --purge $vm; done && { sed -i "1!d" /root/.ssh/known_hosts; } > /dev/null 2>&1;set +f'

alias 2310d='set -f;sed -i '/vm2310/d' /etc/hosts && for vm in $(multipass list | grep vm2310[0-9] | awk -F " " "{print \$1}"); do multipass stop $vm; multipass delete --purge $vm; done && { sed -i "1!d" /root/.ssh/known_hosts; } > /dev/null 2>&1;set +f'

alias 2404d='set -f;sed -i '/vm2404/d' /etc/hosts && for vm in $(multipass list | grep vm2404[0-9] | awk -F " " "{print \$1}"); do multipass stop $vm; multipass delete --purge $vm; done && { sed -i "1!d" /root/.ssh/known_hosts;kubectl config delete-cluster 2404ctx && kubectl config delete-context 2404ctx && kubectl config delete-user 2404ctx && kubectl config unset current-context; } > /dev/null 2>&1;set +f'

alias 2410d='set -f;sed -i '/vm2410/d' /etc/hosts && for vm in $(multipass list | grep vm2410[0-9] | awk -F " " "{print \$1}"); do multipass stop $vm; multipass delete --purge $vm; done && { sed -i "1!d" /root/.ssh/known_hosts;kubectl config delete-cluster 2410ctx && kubectl config delete-context 2410ctx && kubectl config delete-user 2410ctx && kubectl config unset current-context; } > /dev/null 2>&1;set +f'

# 2. multipass login
alias 1604='ip=$(cat /etc/hosts | grep 1604 | awk -F " " '\''{print $1}'\'') && ssh root@$ip'

alias 1804='ip=$(cat /etc/hosts | grep 1804 | awk -F " " '\''{print $1}'\'') && ssh root@$ip'

alias 2004='ip=$(cat /etc/hosts | grep 2004 | awk -F " " '\''{print $1}'\'') && ssh root@$ip'

alias 2204='ip=$(cat /etc/hosts | grep 2204 | awk -F " " '\''{print $1}'\'') && ssh root@$ip'
alias 22040='ip=$(cat /etc/hosts | grep 22040 | awk -F " " '\''{print $1}'\'') && ssh root@$ip'
alias 22041='ip=$(cat /etc/hosts | grep 22041 | awk -F " " '\''{print $1}'\'') && ssh root@$ip'

alias 2304='ip=$(cat /etc/hosts | grep 2304 | awk -F " " '\''{print $1}'\'') && ssh root@$ip'

alias 2404='ip=$(cat /etc/hosts | grep 2404 | awk -F " " '\''{print $1}'\'') && ssh root@$ip'
alias 24040='ip=$(cat /etc/hosts | grep 24040 | awk -F " " '\''{print $1}'\'') && ssh root@$ip'
alias 24041='ip=$(cat /etc/hosts | grep 24041 | awk -F " " '\''{print $1}'\'') && ssh root@$ip'

alias 2410='ip=$(cat /etc/hosts | grep 2410 | awk -F " " '\''{print $1}'\'') && ssh root@$ip'
alias 24100='ip=$(cat /etc/hosts | grep 24100 | awk -F " " '\''{print $1}'\'') && ssh root@$ip'
alias 24101='ip=$(cat /etc/hosts | grep 24101 | awk -F " " '\''{print $1}'\'') && ssh root@$ip'

# 3. gc extra-k8s ctx 
alias dkc='set -f;{ kubectl config delete-cluster $1 && kubectl config delete-context $1 && kubectl config delete-user $1 && kubectl config unset current-context; } > /dev/null 2>&1;set +f'

# 4. restart multipass service
alias mmrs="systemctl stop snap.multipass.multipassd.service && systemctl start snap.multipass.multipassd.service && systemctl status snap.multipass.multipassd.service"

#key reference
alias key="cat /root/wcni-kind/LabasCode/weiluo/env.x"

# vpp
alias vpp="cd /root/wcni-kind/LabasCode/netenv/4-adv-netwotk/92-VPP-DPDK-SRIOV-RDMA/2-VPP"
alias image="cd /var/lib/libvirt/images && ls -lrth"
alias vppcc='echo "sed \"/^\s*#/d; /^$/d\" "'
alias vppdump='echo pcap trace rx tx max 300000 intfc any'

# env
alias envkind='echo "# kind version" && kind version; echo "# docker info" && docker info; echo "# kubectl version" && kubectl version; echo "# helm version" && helm version; echo "# lsb_release -a" && lsb_release -a; echo "# uname -a" && uname -a'

# k3s
alias k3sconfig="export KUBECONFIG=/etc/rancher/k3s/k3s.yaml"

alias addk3s="rm -rf /usr/local/bin/k3s/ ; wget http://192.168.2.100/http/k3s -P /usr/local/bin/ && chmod +x /usr/local/bin/k3s && INSTALL_K3S_SKIP_DOWNLOAD=true INSTALL_K3S_EXEC='--docker --flannel-backend=none --disable=traefik --disable=servicelb --cluster-cidr=10.42.0.0/16,2001:cafe:42::/56 --service-cidr=10.43.0.0/16,2001:cafe:43::/112 --node-ip=192.168.2.99,1010:501::99' /root/wcni-kind/LabasCode/k8senv/vmenv/k3senv/k3s-install.sh && export KUBECONFIG=/etc/rancher/k3s/k3s.yaml"

alias kpraddk3s="rm -rf /usr/local/bin/k3s/ ; wget http://192.168.2.100/http/k3s -P /usr/local/bin/ && chmod +x /usr/local/bin/k3s && INSTALL_K3S_SKIP_DOWNLOAD=true INSTALL_K3S_EXEC='--docker --flannel-backend=none --disable-kube-proxy --disable=traefik --disable=servicelb --cluster-cidr=10.42.0.0/16 --service-cidr=10.43.0.0/16 --node-ip=192.168.2.99' /root/wcni-kind/LabasCode/k8senv/vmenv/k3senv/k3s-install.sh && export KUBECONFIG=/etc/rancher/k3s/k3s.yaml"

alias appcni="kubectl apply -f /root/wcni-kind/LabasCode/multus/20-kind-multus-macvlan-dualstack/k8snetworkplumbingwg/"

alias delk3s="sudo /root/wcni-kind/LabasCode/k8senv/vmenv/k3senv/k3s-uninstall.sh && docker stop \$(docker ps -aq --filter 'name=k8s_') ; docker rm \$(docker ps -aq --filter 'name=k8s_') ; docker system prune -f && docker network create --driver bridge --subnet=172.18.0.0/16 --gateway=172.18.0.1 --ipv6 --subnet=172:18:0:1::/64 kind ; rm -rf /etc/cni/net.d/* ; df -h /"

# vmk3s
alias addk3svm='addk3svm-cluster()
{
    k3s_version=v1.27.3+k3s1
    master_ip="10.1.5.51"
    for ip in 10.1.5.51 10.1.8.52; do
        if [ "$ip" == "$master_ip" ]; then
            k3sup install \
                --ip="$master_ip" \
                --user=root \
                --merge \
                --sudo \
                --cluster \
                --k3s-version="$k3s_version" \
                --k3s-extra-args="--docker --flannel-backend=none --cluster-cidr=10.244.0.0/16 --disable-network-policy --disable traefik --disable servicelb --node-ip=$master_ip" \
                --local-path="$HOME/.kube/config" \
                --context=k3svm
        else
            k3sup join \
                --ip="$ip" \
                --user=root \
                --sudo \
                --k3s-version="$k3s_version" \
                --k3s-extra-args="--docker" \
                --server-ip="$master_ip" \
                --server-user=root
        fi
    done

}
addk3svm-cluster'

alias delk3svm='delk3svm-cluster()
{
    for ip in 10.1.5.51 10.1.8.52; do
        echo "Uninstalling k3s on $ip..."
        sshpass -p hive ssh-copy-id -o StrictHostKeyChecking=no -p 22 root@"$ip" > /dev/null 2>&1 && ssh -o StrictHostKeyChecking=no $ip "bash -c "/root/k3s-uninstall.sh > /dev/null 2>&1""
        ssh -o StrictHostKeyChecking=no $ip "/root/rmvcontainers.sh > /dev/null 2>&1 ; rm -rf /etc/cni/net.d/*"
    done
    echo "Deleting kubectl configurations.."
    kubectl config delete-cluster "k3svm"
    kubectl config delete-context "k3svm"
    kubectl config delete-user "k3svm"
    kubectl config unset current-context
}
delk3svm-cluster'

#kcli
alias vm="cd /root/wcni-kind/LabasCode/k8senv/vmenv"
alias kclissh='ssh-keygen -f "/root/.ssh/known_hosts" -R "192.168.2.96" > /dev/null 2>&1'
alias vms='ssh-keygen -f "/root/.ssh/known_hosts" -R "192.168.2.127" > /dev/null 2>&1 && ssh -o StrictHostKeyChecking=no 192.168.2.127'
alias 98='ssh -o StrictHostKeyChecking=no 192.168.2.98'
alias 51='ssh -o StrictHostKeyChecking=no 10.1.5.51'
alias 52='ssh -o StrictHostKeyChecking=no 10.1.8.52'
alias 61='sshpass -p hive ssh-copy-id -o StrictHostKeyChecking=no -p 22 root@192.168.2.61 > /dev/null 2>&1 && ssh -o StrictHostKeyChecking=no 192.168.2.61'
alias 62='sshpass -p hive ssh-copy-id -o StrictHostKeyChecking=no -p 22 root@192.168.2.62 > /dev/null 2>&1 && ssh -o StrictHostKeyChecking=no 192.168.2.62'
alias 71='sshpass -p hive ssh-copy-id -o StrictHostKeyChecking=no -p 22 root@192.168.2.71 > /dev/null 2>&1 && ssh -o StrictHostKeyChecking=no 192.168.2.71'
alias 72='sshpass -p hive ssh-copy-id -o StrictHostKeyChecking=no -p 22 root@192.168.2.72 > /dev/null 2>&1 && ssh -o StrictHostKeyChecking=no 192.168.2.72'
alias vppof="ssh -o StrictHostKeyChecking=no 192.168.2.71 'systemctl stop vpp' ; ssh -o StrictHostKeyChecking=no 192.168.2.72 'systemctl stop vpp'"
alias 52='ssh -o StrictHostKeyChecking=no 10.1.8.52'
alias 61='sshpass -p hive ssh-copy-id -o StrictHostKeyChecking=no -p 22 root@192.168.2.61 > /dev/null 2>&1 && ssh -o StrictHostKeyChecking=no 192.168.2.61'
alias 62='sshpass -p hive ssh-copy-id -o StrictHostKeyChecking=no -p 22 root@192.168.2.62 > /dev/null 2>&1 && ssh -o StrictHostKeyChecking=no 192.168.2.62'
alias 66='ssh -o StrictHostKeyChecking=no 192.168.2.66'
alias 71='sshpass -p hive ssh-copy-id -o StrictHostKeyChecking=no -p 22 root@192.168.2.71 > /dev/null 2>&1 && ssh -o StrictHostKeyChecking=no 192.168.2.71'
alias 72='sshpass -p hive ssh-copy-id -o StrictHostKeyChecking=no -p 22 root@192.168.2.72 > /dev/null 2>&1 && ssh -o StrictHostKeyChecking=no 192.168.2.72'
alias vppof="ssh -o StrictHostKeyChecking=no 192.168.2.71 'systemctl stop vpp' ; ssh -o StrictHostKeyChecking=no 192.168.2.72 'systemctl stop vpp'"
alias vppsts="ssh -o StrictHostKeyChecking=no 192.168.2.71 'systemctl status vpp' ; ssh -o StrictHostKeyChecking=no 192.168.2.72 'systemctl status vpp'"
alias vppon="ssh -o StrictHostKeyChecking=no 192.168.2.71 'systemctl restart vpp' ; ssh -o StrictHostKeyChecking=no 192.168.2.72 'systemctl restart vpp'"
alias kl="kcli"
alias kls="kcli list vms"

# prepnode:
modprobe rdma_rxe
modprobe sctp

# RBAC:
alias rbac='echo "cd /var/run/secrets/kubernetes.io/serviceaccount && export CURL_CA_BUNDLE=/var/run/secrets/kubernetes.io/serviceaccount/ca.crt && TOKEN=\$(cat /var/run/secrets/kubernetes.io/serviceaccount/token) && NAMESPACE=\$(cat /var/run/secrets/kubernetes.io/serviceaccount/namespace) && curl -H \"Authorization: Bearer \$TOKEN\" -H \"Content-Type: application/json\" https://kubernetes.default.svc/api/v1/namespaces/\$NAMESPACE/pods"'

# Alias definitions.
# You may want to put all your additions into a separate file like
# ~/.bash_aliases, instead of adding them here directly.
# See /usr/share/doc/bash-doc/examples in the bash-doc package.

if [ -f ~/.bash_aliases ]; then
    . ~/.bash_aliases
fi

if [[ -n $SSH_CONNECTION ]]; then
   echo "************************************************"
   echo "git clone git@gitee.com:rowan-wcni/wcni-kind.git"
   echo "Website: www.yuque.com/wei.luo|youdianzhishi.com"
   echo -e "\033[1m+\033[0m""WeChat: clabernetes"
   echo "************************************************"
fi

# enable programmable completion features (you don't need to enable
# this, if it's already enabled in /etc/bash.bashrc and /etc/profile
# sources /etc/bash.bashrc).
#if [ -f /etc/bash_completion ] && ! shopt -oq posix; then
#    . /etc/bash_completion
#fi


# PROXY:
git config --global http.proxy socks5://192.168.2.10:10808
git config --global https.proxy socks5://192.168.2.10:10808

# http/https proxy
export HTTP_PROXY="socks5://192.168.2.10:10808"
export HTTPS_PROXY="socks5://192.168.2.10:10808"
export NO_PROXY="localhost,127.0.0.1,10.1.0.0/16"

go env -w GO111MODULE=on && go env -w GOPROXY=https://goproxy.cn,direct
# wget https://go.dev/dl/go1.23.2.linux-amd64.tar.gz
# tar -C /usr/local -xzf go1.23.2.linux-amd64.tar.gz
# export GOPATH=$HOME/go
# export PATH=/usr/local/go/bin:$PATH:$GOPATH/bin
# go env -w GO111MODULE=on && go env -w GOPROXY=https://goproxy.cn,direct

export PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin:/root/bin
export PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin:/root/bin:/root/bin
export PATH=$PATH:/root/.local/bin
export PATH=$HOME/.istioctl/bin:$PATH
export PATH=$PATH:/root/packetdrill/gtests/net/packetdrill

#PS1="[\u@\h \W]\$ "
PS1='[\u@rowan> \W]\$ '

source <(kubectl completion bash)
